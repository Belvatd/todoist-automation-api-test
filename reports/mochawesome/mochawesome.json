{
  "stats": {
    "suites": 3,
    "tests": 9,
    "passes": 8,
    "pending": 0,
    "failures": 1,
    "start": "2022-06-29T07:03:40.882Z",
    "end": "2022-06-29T07:03:44.049Z",
    "duration": 3167,
    "testsRegistered": 9,
    "passPercent": 88.9,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "20c32a7b-4ef5-49b5-83e0-7df14deccaff",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "68ac0b56-65ab-44de-ac14-808d77feb042",
        "title": "OMDB Movie List",
        "fullFile": "D:\\DOT\\Automation api todoist\\todoist-automation-api\\api\\test\\movie-list-test.js",
        "file": "\\api\\test\\movie-list-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "@get As a User, I want to be able to get OMDB Movie list",
            "fullTitle": "OMDB Movie List @get As a User, I want to be able to get OMDB Movie list",
            "timedOut": false,
            "duration": 134,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, keySearch);\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "9851f975-6fcd-46b3-b566-b2a11451a91c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error message when I send request without key of search",
            "fullTitle": "OMDB Movie List @get As a User, I should got error message when I send request without key of search",
            "timedOut": false,
            "duration": 77,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, '');\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Incorrect IMDb ID.');",
            "err": {},
            "isRoot": false,
            "uuid": "370b2f8c-5c17-4526-b23d-c256692e8aa3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error 401 when I send request with invalid API Key",
            "fullTitle": "OMDB Movie List @get As a User, I should got error 401 when I send request with invalid API Key",
            "timedOut": false,
            "duration": 79,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(invalidApiKey, keySearch);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Invalid API key!');",
            "err": {},
            "isRoot": false,
            "uuid": "4b18deff-1fdd-456b-89fa-b61f97e43ce7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "9851f975-6fcd-46b3-b566-b2a11451a91c",
          "370b2f8c-5c17-4526-b23d-c256692e8aa3",
          "4b18deff-1fdd-456b-89fa-b61f97e43ce7"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 290,
        "root": false,
        "rootEmpty": false,
        "_timeout": 180000
      },
      {
        "uuid": "a3c0e7f5-bab1-49d7-98c9-caa497b73bfa",
        "title": "Todoist Create New Project",
        "fullFile": "D:\\DOT\\Automation api todoist\\todoist-automation-api\\api\\test\\ProjectModuleTest\\create-new-project-test.js",
        "file": "\\api\\test\\ProjectModuleTest\\create-new-project-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "@post As a User, I want to be able to create a new project",
            "fullTitle": "Todoist Create New Project @post As a User, I want to be able to create a new project",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "page.createNewProject(\n  token,\n  contentType,\n  payload,\n  function (err, res) {\n    expect(res.status).to.equal(200)\n    done()\n  }\n)",
            "err": {
              "message": "AssertionError: expected 403 to equal 200",
              "estack": "AssertionError: expected 403 to equal 200\n    at D:\\DOT\\Automation api todoist\\todoist-automation-api\\api\\test\\ProjectModuleTest\\create-new-project-test.js:34:31\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:716:12)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at endReadableNT (internal/streams/readable.js:1317:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
              "diff": "- 403\n+ 200\n"
            },
            "isRoot": false,
            "uuid": "3b95e462-007d-4e30-bdec-b1fe477ca99f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@post no Payload",
            "fullTitle": "Todoist Create New Project @post no Payload",
            "timedOut": false,
            "duration": 755,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "page.createNewProject(\n  token,\n  contentType,\n  null,\n  function (err, res) {\n    expect(res.status).to.equal(400)\n    done()\n  }\n)",
            "err": {},
            "isRoot": false,
            "uuid": "b017d42f-3bc1-49a1-b21e-fdd574ebd52d",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b017d42f-3bc1-49a1-b21e-fdd574ebd52d"
        ],
        "failures": [
          "3b95e462-007d-4e30-bdec-b1fe477ca99f"
        ],
        "pending": [],
        "skipped": [],
        "duration": 755,
        "root": false,
        "rootEmpty": false,
        "_timeout": 180000
      },
      {
        "uuid": "304e3359-174e-4261-badb-0b67a3d49d2d",
        "title": "Todoist Get All Projects",
        "fullFile": "D:\\DOT\\Automation api todoist\\todoist-automation-api\\api\\test\\ProjectModuleTest\\get-all-projects-test.js",
        "file": "\\api\\test\\ProjectModuleTest\\get-all-projects-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "@post As a User, I want to be able to get all my projects",
            "fullTitle": "Todoist Get All Projects @post As a User, I want to be able to get all my projects",
            "timedOut": false,
            "duration": 387,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "page.getAllProject(\n  token,\n  null,\n  function (err, res) {\n    expect(res.status).to.equal(200)\n    done()\n  }\n)",
            "err": {},
            "isRoot": false,
            "uuid": "7ca9668a-73e5-411a-8064-57baecc8aa5d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@post As a User, I should got error 401 Unauthorized when I send request without token",
            "fullTitle": "Todoist Get All Projects @post As a User, I should got error 401 Unauthorized when I send request without token",
            "timedOut": false,
            "duration": 367,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "page.getAllProject(\n  null,\n  null,\n  function (err, res) {\n    expect(res.status).to.equal(401)\n    expect(res.text).to.equal('Forbidden')\n    done()\n  }\n)",
            "err": {},
            "isRoot": false,
            "uuid": "2cd4561c-9fec-4bee-b951-105499ffa9c3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@post As a User, I should got error 401 Unauthorized when I send request with invalid token",
            "fullTitle": "Todoist Get All Projects @post As a User, I should got error 401 Unauthorized when I send request with invalid token",
            "timedOut": false,
            "duration": 347,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "page.getAllProject(\n  invalidToken,\n  null,\n  function (err, res) {\n    expect(res.status).to.equal(401)\n    expect(res.text).to.equal('Forbidden')\n    done()\n  }\n)",
            "err": {},
            "isRoot": false,
            "uuid": "658893f5-73ae-4845-9c5c-abce66ceadcf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@post As a User, I should got error 403 Forbidden when I send request with request payload",
            "fullTitle": "Todoist Get All Projects @post As a User, I should got error 403 Forbidden when I send request with request payload",
            "timedOut": false,
            "duration": 77,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "page.getAllProject(\n  token,\n  payload,\n  function (err, res) {\n    expect(res.status).to.equal(403)\n    expect(res.text).exist\n    done()\n  }\n)",
            "err": {},
            "isRoot": false,
            "uuid": "55c62cfb-b5e3-45e3-9f74-91cf4ca08f1f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "7ca9668a-73e5-411a-8064-57baecc8aa5d",
          "2cd4561c-9fec-4bee-b951-105499ffa9c3",
          "658893f5-73ae-4845-9c5c-abce66ceadcf",
          "55c62cfb-b5e3-45e3-9f74-91cf4ca08f1f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1178,
        "root": false,
        "rootEmpty": false,
        "_timeout": 180000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 180000
  },
  "copyrightYear": 2022
}